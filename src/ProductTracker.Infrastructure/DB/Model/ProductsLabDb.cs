// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace DataModel
{
	public partial class ProductsLabDb : DataConnection
	{
		public ProductsLabDb()
		{
			InitDataContext();
		}

		public ProductsLabDb(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public ProductsLabDb(DataOptions<ProductsLabDb> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		/// <summary>
		/// Продукт
		/// </summary>
		public ITable<Good>             Goods             => this.GetTable<Good>();
		/// <summary>
		/// Дом (локация)
		/// </summary>
		public ITable<House>            Houses            => this.GetTable<House>();
		/// <summary>
		/// Жильцы в доме (в локации)
		/// </summary>
		public ITable<HouseXrefUser>    HouseXrefUsers    => this.GetTable<HouseXrefUser>();
		/// <summary>
		/// Информация о покупке в магазине
		/// </summary>
		public ITable<Purchase>         Purchases         => this.GetTable<Purchase>();
		/// <summary>
		/// Детализация покупки
		/// </summary>
		public ITable<PurchaseXrefGood> PurchaseXrefGoods => this.GetTable<PurchaseXrefGood>();
		/// <summary>
		/// Утилизация
		/// </summary>
		public ITable<Recycle>          Recycles          => this.GetTable<Recycle>();
		public ITable<SchemaMigration>  SchemaMigrations  => this.GetTable<SchemaMigration>();
		/// <summary>
		/// Пользователь
		/// </summary>
		public ITable<User>             Users             => this.GetTable<User>();
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static Good? Find(this ITable<Good> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Good?> FindAsync(this ITable<Good> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static House? Find(this ITable<House> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<House?> FindAsync(this ITable<House> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static HouseXrefUser? Find(this ITable<HouseXrefUser> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<HouseXrefUser?> FindAsync(this ITable<HouseXrefUser> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Purchase? Find(this ITable<Purchase> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Purchase?> FindAsync(this ITable<Purchase> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static PurchaseXrefGood? Find(this ITable<PurchaseXrefGood> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<PurchaseXrefGood?> FindAsync(this ITable<PurchaseXrefGood> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Recycle? Find(this ITable<Recycle> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Recycle?> FindAsync(this ITable<Recycle> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static SchemaMigration? Find(this ITable<SchemaMigration> table, string version)
		{
			return table.FirstOrDefault(e => e.Version == version);
		}

		public static Task<SchemaMigration?> FindAsync(this ITable<SchemaMigration> table, string version, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Version == version, cancellationToken);
		}

		public static User? Find(this ITable<User> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<User?> FindAsync(this ITable<User> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}
		#endregion
	}
}
